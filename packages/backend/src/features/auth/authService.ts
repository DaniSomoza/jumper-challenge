import { SiweMessage } from 'siwe'
import { isAddress } from 'ethers'
import { TokenExpiredError } from 'jsonwebtoken'

import { createJWT, verifyJWT } from '../../lib/jwt'
import { createNonce } from '../../lib/nonce'
import { NONCE_EXPIRATION_TIME, SESSION_EXPIRATION_TIME } from '../../constants'
import UnauthorizedError from '../../errors/UnauthorizedError'
import BadRequestError from '../../errors/BadRequestError'
import leaderboardService from '../leaderboard/leaderBoardService'
import {
  jwtNoncePayload,
  jwtSessionPayload,
  signInData,
  SiweMessageData
} from '../../types/authTypes'

async function getNonce(address: string) {
  if (!isAddress(address)) {
    throw new BadRequestError('Invalid address', { address })
  }

  const nonce = createNonce()

  const jwtNoncePayload: jwtNoncePayload = { nonce, address, jwtType: 'nonce' }
  const nonceSigned = createJWT(jwtNoncePayload, NONCE_EXPIRATION_TIME)

  return {
    address,
    nonce,
    nonceSigned
  }
}

async function signIn({ siweMessageData, signature, nonceSigned }: signInData) {
  if (!nonceSigned) {
    throw new BadRequestError('Missing nonceSigned')
  }

  if (!signature) {
    throw new BadRequestError('Missing signature')
  }

  validateSiweMessageData(siweMessageData)

  // Verify that the provided nonce was generated by this backend and is still valid
  const { nonce, address, jwtType } = verifyNonce(nonceSigned)

  if (nonce !== siweMessageData.nonce || jwtType !== 'nonce') {
    throw new UnauthorizedError('Invalid nonce', { nonce, address })
  }

  if (address !== siweMessageData.address && !!siweMessageData.address) {
    throw new UnauthorizedError('Invalid address', {
      nonce,
      address,
      expectedAddress: siweMessageData.address
    })
  }

  try {
    const siweMessage = new SiweMessage(siweMessageData)

    await siweMessage.verify({ signature })
  } catch {
    throw new UnauthorizedError('Invalid signature', {
      message: siweMessageData,
      signature
    })
  }

  const chainId = siweMessageData.chainId

  const jwtSessionPayload: jwtSessionPayload = {
    address,
    chainId: chainId.toString(),
    jwtType: 'session'
  }

  const sessionToken = createJWT(jwtSessionPayload, SESSION_EXPIRATION_TIME)

  await leaderboardService.savePoints(address, chainId)

  return {
    sessionToken
  }
}

function verifySession(sessionToken: string): jwtSessionPayload {
  try {
    const jwtSessionPayload = verifyJWT<jwtSessionPayload>(sessionToken)

    if (jwtSessionPayload.jwtType !== 'session') {
      throw new UnauthorizedError('Invalid session', { sessionToken })
    }

    return jwtSessionPayload
  } catch {
    throw new UnauthorizedError('Invalid session', { sessionToken })
  }
}

function verifyNonce(nonceSigned: string) {
  try {
    const { nonce, address, jwtType } = verifyJWT<jwtNoncePayload>(nonceSigned)

    return { nonce, address, jwtType }
  } catch (error) {
    if (error instanceof TokenExpiredError) {
      throw new UnauthorizedError('Invalid nonce', {
        reason: 'Nonce Expired Error',
        expiredAt: error.expiredAt.toISOString(),
        nonceSigned
      })
    }

    // this nonce was not generated by the server (jwt nonceSigned is not valid)
    throw new UnauthorizedError('Invalid nonce', { nonceSigned })
  }
}

const authService = {
  getNonce,
  signIn,
  verifySession,
  verifyNonce
}

export default authService

function validateSiweMessageData(siweMessageData: SiweMessageData) {
  // NOTE: validateSiweMessageData is intentionally simplified for the purpose of this coding challenge.
  // In a production-ready application, additional validations and security checks should be implemented.

  if (!isAddress(siweMessageData.address)) {
    throw new BadRequestError('Invalid address field in siwe message')
  }

  if (!siweMessageData.chainId) {
    throw new BadRequestError('Missing chainId field in siwe message')
  }

  if (typeof siweMessageData.chainId !== 'number') {
    throw new BadRequestError('Invalid chainId field in siwe message')
  }

  if (!siweMessageData.domain) {
    throw new BadRequestError('Missing domain field in siwe message')
  }

  if (!siweMessageData.nonce) {
    throw new BadRequestError('Missing nonce field in siwe message')
  }
}
